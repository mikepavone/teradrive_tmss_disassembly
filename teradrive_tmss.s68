ADR_400000 equ $400000
ADR_A00000 equ $A00000
ADR_A10001 equ $A10001
ADR_A11100 equ $A11100
ADR_A11200 equ $A11200
ADR_A14000 equ $A14000
ADR_AE0001 equ $AE0001
;bit 4 - tested at startup, and after copying code to $FF0100, set shortly afterwards if clear
;bit 5 - tested late in one of the code paths
;bit 7 - cleared in infinite loop at $31E and also after bit 5 is tested if it's clear
ADR_AE0003 equ $AE0003
;byte value is written here
;first write is upper byte of little endian word read from $AF1166
;second write appears to be that value + 1
;appears to control which bank of memory is mapped in at $B00000
ADR_AF1162 equ $AF1162
ADR_AF1164 equ $AF1164
;bit 0 cleared in infinite loop
;bit 1 seems to control mapping cart/exp vs teradrive
;0 = Teradrive mapped in at $0
;1 = cart/exp mapped in at $0/$400000
;bit 2 - set before copying routine to RAM that copies cart/exp headers to RAM
;bit 6 - set before CPU is purposely wedged?
ADR_AF1165 equ $AF1165
ADR_AF1166 equ $AF1166
;appears to be a word wide register holding a little-endian value
ADR_AF1167 equ $AF1167
;part of $AF1166, accessed as a byte for endian swapping purposes
ADR_B00000 equ $B00000
ADR_BC0000 equ $BC0000
ADR_C00000 equ $C00000
ADR_C00004 equ $C00004
ADR_C00005 equ $C00005
ADR_FF0000 equ $FF0000
ADR_FF000E equ $FF000E
ADR_FF0012 equ $FF0012
ADR_FF0016 equ $FF0016
ADR_FF001A equ $FF001A
ADR_FF001E equ $FF001E
ADR_FF002A equ $FF002A
ADR_FF002E equ $FF002E
ADR_FF003E equ $FF003E
ADR_FF0042 equ $FF0042
ADR_FF004E equ $FF004E
ADR_FF0052 equ $FF0052
ADR_FF005A equ $FF005A
ADR_FF005E equ $FF005E
ADR_FF0062 equ $FF0062
ADR_FF006A equ $FF006A
ADR_FF0072 equ $FF0072
ADR_FF007A equ $FF007A
ADR_FF0092 equ $FF0092
ADR_FF0096 equ $FF0096
ADR_FF009E equ $FF009E
ADR_FF00F8 equ $FF00F8
ADR_FF00FC equ $FF00FC
ADR_FF0100 equ $FF0100
ADR_FF2000 equ $FF2000
ADR_FF8000 equ $FF8000

reset_sp:
	dc.l $01000000
reset_pc:
	dc.l start
	dc.l access_fault, address_error
	;10
	dc.l illegal_instruction, integer_divide_by_zero, chk_exception, trap_exception
	;20
	dc.l privilege_violation, trace_exception, line_1010_emulator, line_1111_emulator
	;30
	dc.l mask_interrupts_and_do_tmss_fail, mask_interrupts_and_do_tmss_fail, mask_interrupts_and_do_tmss_fail, mask_interrupts_and_do_tmss_fail
palette:
	;40
	dc.w $0000, $0EEE, $0EC0, $0EA0, $0E80, $0E60, $0E40, $0E20
	;50
	dc.w $0E00, $0C00, $0A00, $0800, $0600, $0400, $0200, $0000
	;60
	dc.l mask_interrupts_and_do_tmss_fail, int_1, int_2, int_3
	;70
	dc.l int_4, int_5, int_6, int_7
	;80
	dc.l trap_0, trap_1, trap_2, trap_3
	;90
	dc.l trap_4, trap_5, trap_6, trap_7
	;A0
	dc.l trap_8, trap_9, trap_a, trap_b
	;B0
	dc.l trap_c, trap_d, trap_e, trap_f
encrypted_tmss_string:
	;"PRODUCED BY OR UN"
	dc.b $17, $13, $1F, $16, $15, $43, $75, $0B, $64, $17, $7D, $65, $4B, $72, $04, $0C
	;"DER LICENSE FROM "
	dc.b $1C, $0B, $00, $72, $05, $02, $8D, $06, $70, $6E, $B7, $0C, $74, $03, $36, $1C
	;"SEGA ENTERPRISES "
	dc.b $B9, $00, $57, $17, $13, $0C, $32, $16, $1A, $13, $01, $72, $74, $1C, $6C, $16
	;"Ltd.", 0, 0, 0, 0
	dc.b $70, $03, $15, $05, $B1, $21, $6B, $20
ADR_F8:
	dc.w $4DBA, $0009
ADR_FC:
	dc.w $461C
tmss_string_length:
	dc.w ADR_F8-encrypted_tmss_string
sega_header:
	dc.b "SEGA TERA286    "
	dc.b "(C)SEGA 1990.NOV"
	dc.b "TERA286 INITIALI"
	dc.b "ZE              "
	dc.b "                "
	dc.b "TERA286 INITIALI"
	dc.b "ZE              "
	dc.b "                "
	dc.b "SYSTEM        ", 0, 0
	dc.b "                "
	dc.l $0, $FFF, $FF0000, $FFFFFF
	dc.b "                "
	dc.b "                "
	dc.b "                "
	dc.b "                "
	dc.b "JUE             "

md_hardware_init:
	;runs from $FF0000
	;a1=462
	move #$2700, SR	;200
	lea.l reg_values_for_init_routine(pc), a7	;204
	movem.l (a7)+, d2/d5/a0-a2/a6	;208
	;d2 = $4000
	;d5 = $100
	;a0 = $A10000
	;a1 = $C00000
	;a2 = $A11100
	;a6 = $A00000
	moveq.l #15, d3	;20C
	move.l a2, a3	;20E
	add.w d5, a3	;210 - a3 = $A11200
	move.l a1, a4	;212
	addq.w #4, a4	;214 - a4 = $C00004
	moveq.l #0, d0	;216
	move.l d0, a7	;218
	bset.b d0, (a2)	;21A - assert Z80 busreq
	bclr.b d0, (a3)	;21C - assert Z80 reset
	lea.l vdp_reg_values_for_init(pc), a5	;21E
	move.w #$8000, d6	;222
	moveq.l #18, d7	;226
ADR_228:
	move.b (a5)+, d6	;228
	move.w d6, (a4)	;22A
	add.w d5, d6	;22C
	dbf d7, ADR_228	;22E
	;VDP registers
	;00 = 04
	;01 = 04
	;02 = 30
	;03 = 3C
	;04 = 07
	;05 = 6C
	;06-0B = 00
	;0C = 81 - H40 mode
	;0D = 37
	;0E = 00
	;0F = 02 - autoinc 2
	;10 = 11
	;11 = 00
	;12 = 00
	moveq.l #3, d6	;232
ADR_234:
	move.b (a5)+, (17, a1, d0.w)	;234
	dbf d6, ADR_234	;238
	bset.b d0, (a3)	;23C - clear Z80 reset
ADR_23E:
	btst.b d0, (a2)	;23E - wait for Z80 busack
	beq.b ADR_246	;240
	dbf d6, ADR_23E	;242
ADR_246:
	move.b (a5)+, (a6)+	;246 - copy 257 byte Z80 program
	dbf d5, ADR_246	;248
	bclr.b d0, (a3)	;24C - assert Z80 reset
	bclr.b d0, (a2)	;24E - clear Z80 busreq
	bset.b d0, (a3)	;250 - clear Z80 reset
	move.w #$C000, (a4)	;252 - setup CRAM writes
	move.w d0, (a4)	;256
	moveq.l #32, d7	;258
	add.w d7, a0	;25A
ADR_25C:
	move.l d0, (a1)	;25C
	subq.w #1, d7	;25E
	bne.b ADR_25C	;260
	move.w d2, (a4)	;262
	move.w #16, (a4)	;264 - setup VSRAM writes
	moveq.l #19, d7	;268
ADR_26A:
	move.l d0, (a1)	;26A - clear VSRAM
	dbf d7, ADR_26A	;26C
	move.w d2, (a4)	;270
	move.w d0, (a4)	;272 - setup VRAM writes
	move.w #$3FFF, d7	;274
ADR_278:
	move.l d0, (a1)	;278 - clear VRAM
	dbf d7, ADR_278	;27A
	move.l d0, (-32, a0, d2.w)	;27E - lock 286 access to MD hardware
	sub.w #65, d2	;282
ADR_286:
	movem.l d0, -(a7)	;286 - clear work RAM except for first $100 bytes
	dbf d2, ADR_286	;28A
ADR_28E:
	move.w d0, -(a0)	;28E - clear IO ports
	subq.b #1, d3	;290
	bne.b ADR_28E	;292
	bclr.b d0, (a3)	;294 - assert Z80 reset
	bset.b d0, (a2)	;296 - assert Z80 busreq
	movem.l (a7)+, d0-d7/a0-a6	;298 - clear registers
	move a0, USP	;29C
	move.l ADR_2F8(pc), a7	;29E
	move.l ADR_2FC(pc), a0	;2A2
	jmp (a0)	;2A6
reg_values_for_init_routine:
	dc.l $4000, $100, $A10000, $C00000, $A11100, $A00000
vdp_reg_values_for_init:
	dc.b $04, $04, $30, $3C, $07, $6C, $00, $00
	dc.b $00, $00, $00, $00, $81, $37, $00, $02
	dc.b $11, $00, $00
psg_init_values:
	dc.b $9F, $BF, $DF, $FF
init_z80_prog:
	incbin "initial_z80_program.bin"
	
ADR_2F8:
	dc.l $0
ADR_2FC:
	dc.l $FF0000

vdp_reg_values:
	dc.b $06, $04, $30, $2C, $07, $54, $00, $00
	dc.b $00, $00, $00, $00, $81, $2B, $00, $02
	dc.b $01, $00, $00
ADR_313:
	dc.b $00, $00, $00, $00, $00

set_tmss_reg_and_return_to_286:
	move.l d0, ADR_A14000.l	;318
return_to_286:
	bclr.b #7, ADR_AE0001.l	;31E - ensure PC memory is not mapped at $0
	bclr.b #0, ADR_AF1164.l	;326 - switch back to 286
	nop	;32E
	bra.b return_to_286	;330

ADR_332:
	bsr ADR_722	;332
	move.w #$8144, ADR_C00004.l	;336
	moveq.l #0, d0	;33E
	bra.b set_tmss_reg_and_return_to_286	;340

access_fault:
address_error:
illegal_instruction:
integer_divide_by_zero:
chk_exception:
trap_exception:
privilege_violation:
trace_exception:
line_1010_emulator:
line_1111_emulator:
int_1:
int_3:
int_5:
int_7:
trap_0:
trap_1:
trap_2:
trap_3:
trap_4:
trap_5:
trap_6:
trap_7:
trap_8:
trap_9:
trap_a:
trap_b:
trap_c:
trap_d:
trap_e:
trap_f:
mask_interrupts_and_do_tmss_fail:
	move #$2700, SR	;342
	bra cart_tmss_fail	;346
int_2:
int_4:
int_6:
	rte	;34A

copy_cart_and_exp_to_work_ram:
    ;run from $FF0100
    ;reg values at entry: a0=0,a1=$400000, a2=$FF8000.l, a3=$4D8.l
	bset.b #1, ADR_AF1164.l	;34C - map cart/exp at $0
	nop	;354
	move.b ADR_AF1164.l, d0	;356
	nop	;35C
	move.b ADR_AF1164.l, d0	;35E
	;copy 16KB from 0 to $FF8000
	move.w #$FFF, d0	;364
ADR_368:
	move.l (a0)+, (a2)+	;368
	dbf d0, ADR_368	;36A
	;copy 16KB from $400000 to $FFC000
	move.w #$FFF, d0	;36E
ADR_372:
	move.l (a1)+, (a2)+	;372
	dbf d0, ADR_372	;374
	bclr.b #1, ADR_AF1164.l	;378 - map Teradrive M68K boot ROM at $0
	nop	;380
	move.b ADR_AF1164.l, d0	;382
	nop	;388
	move.b ADR_AF1164.l, d0	;38A
	jmp (a3)	;390

init_hw_and_boot_tera68k_cart:
	;run from FF0100
	move.b #$87, ADR_AF1164.l	;392
	bclr.b #7, ADR_AE0001.l	;39A
	move.l reset_sp.l, ADR_FF00F8.l	;3A2
	move.l reset_pc.l, ADR_FF00FC.l	;3AC
	jmp ADR_FF0000.l	;3B6

start:
	move #$2700, SR	;3BC
	btst.b #4, ADR_AE0001.l	;3C0 - check for warm boot?
	beq.b cold_boot	;3C8
	moveq.l #0, d0	;3CA
	lea.l check_pc_unlock_result(pc), a6	;3CC
	move.b ADR_AF1167.l, d0	;3D0
	lsl.w #8, d0	;3D6
	move.b ADR_AF1166.l, d0	;3D8
	and.w #$FFE, d0	;3DE
	;d0 == $FFE -> cold_boot -> reset MD hardware and return to 286
	;d0 == $FFC -> set_tmss_reg_and_return_to_286 -> lock TMSS
	;d0 == $FFA -> ADR_332 -> display Sega logo and lock TMSS
	;d0 == $FF8 -> mask_interrupts_and_do_tmss_fail -> lock machine
	;d0 < $A0 || (d0 >= $100 && d0 < $FE0) -> pc_unlock_request
	;else -> run_work_ram_program -> $FF0100
	cmp.w #$FE0, d0	;3E2
	bge.b ADR_3FA	;3E6
	cmp.w #$A0, d0	;3E8
	blt.w pc_unlock_request	;3EC
	cmp.w #$100, d0	;3F0
	bge.w pc_unlock_request	;3F4
	bra.b run_work_ram_program	;3F8
ADR_3FA:
	cmp.w #$FF8, d0	;3FA
	bge.b ADR_406	;3FE
run_work_ram_program:
	jmp ADR_FF0100.l	;400
ADR_406:
	move.l reset_sp(pc), a7	;406
	cmp.w #$FFE, d0	;40A
	beq.b cold_boot	;40E
	cmp.w #$FFC, d0	;410
	beq.w set_tmss_reg_and_return_to_286	;414
	cmp.w #$FFA, d0	;418
	beq.w ADR_332	;41C
	bra.w mask_interrupts_and_do_tmss_fail	;420

cold_boot:
	lea.l md_hardware_init(pc), a0	;424
	lea.l ADR_FF0000.l, a1	;428
	moveq.l #63, d0	;42E
ADR_430:
	move.l (a0)+, (a1)+	;430
	dbf d0, ADR_430	;432
	move.w #$7FFF, d0	;436
	move.l #0, ADR_C00004.l	;43A
ADR_444:
	move.w ADR_C00004.l, d0	;444
	btst.l #1, d0	;44A
	beq.b ADR_454	;44E
	dbf d0, ADR_444	;450
ADR_454:
	lea.l after_cold_boot_md_init(pc), a0	;454
	move.l a0, -(a1)	;458
	move.l a7, -(a1)	;45A
	jmp ADR_FF0000.l	;45C

after_cold_boot_md_init:
	move.w #$8104, ADR_C00004.l	;462
	;ensure there's a valid program that will return to 286 in work RAM
	lea.l set_tmss_reg_and_return_to_286(pc), a0	;46A
	lea.l ADR_FF0100.l, a1	;46E
	moveq.l #31, d0	;474
ADR_476:
	move.l (a0)+, (a1)+	;476
	dbf d0, ADR_476	;478
	btst.b #4, ADR_AE0001.l	;47C - check for warm boot again? (we can get here in warm boot mode via command $FFE)
	bne return_to_286	;484
	lea.l ADR_FF8000.l, a7	;488
	move.w #$F80F, ADR_AF1166.l	;48E
	bset.b #4, ADR_AE0001.l	;496 - set warm boot flag?
	bset.b #2, ADR_AF1164.l	;49E - set video switch to MD
	lea.l copy_cart_and_exp_to_work_ram(pc), a0	;4A6
	lea.l ADR_FF0100.l, a1	;4AA
	move.w #127, d0	;4B0
ADR_4B4:
	move.l (a0)+, (a1)+	;4B4
	dbf d0, ADR_4B4	;4B6
	lea.l reset_sp.l, a0	;4BA
	lea.l ADR_400000.l, a1	;4C0
	lea.l ADR_FF8000.l, a2	;4C6
	lea.l ADR_4D8.l, a3	;4CC
	jmp ADR_FF0100.l	;4D2

ADR_4D8:
	bsr ADR_722	;4D8
	lea.l ADR_FF8000.l, a2	;4DC
	move.l a2, a3	;4E2
	moveq.l #$FFFFFFFF, d0	;4E4
	move.w #$1FFF, d1	;4E6
ADR_4EA:
	cmp.l (a2)+, d0	;4EA
	bne.b ADR_4F6	;4EC
	dbf d1, ADR_4EA	;4EE
	moveq.l #0, d1	;4F2
	bra.b cart_check_done	;4F4
ADR_4F6:
	lea.l sega_header(pc), a0	;4F6
	move.l (a0)+, d0	;4FA
	move.l a3, a2	;4FC
	cmp.l (256, a2), d0	;4FE
	beq.b cart_tmss_pass	;502
	rol.l #8, d0	;504
	cmp.b (257, a2), d0	;506
	bne.w cart_tmss_fail	;50A
	swap.w d0	;50E
	cmp.w (258, a2), d0	;510
	bne.w cart_tmss_fail	;514
	swap.w d0	;518
	rol.w #8, d0	;51A
	cmp.b (260, a2), d0	;51C
	bne.w cart_tmss_fail	;520
cart_tmss_pass:
	;Found match for SEGA in cart
	moveq.l #1, d1	;524
	add.w #$104, a2	;526
	move.l a2, a3	;52A
	cmp.l (a0)+, (a2)+	;52C - check for ' TER'
	bne.b normal_cart	;52E
	cmp.l (a0)+, (a2)+	;530 - check for 'A286'
	beq.b cart_check_done	;532
	cmpi.l #$4136384B, (-4, a2)	;534 - check for 'A68K'
	bne.b normal_cart	;53C
	moveq.l #2, d1	;53E
	bra.b cart_check_done	;540
normal_cart:
	moveq.l #3, d1	;542
cart_check_done:
	movem.l d1, -(a7)	;544 - d1 = cart type, 0 = none, 1 = TERA286, 2 = TERA68K, 3 = normal
	lea.l check_option_rom_tmss_result(pc), a6	;548
	lea.l ADR_BC0000.l, a0	;54C
	lea.l encrypted_tmss_string(pc), a1	;552
	move.l #$8000, d1	;556
	moveq.l #0, d2	;55C
	move.w tmss_string_length(pc), d3	;55E
	moveq.l #0, d0	;562
	move.l sega_header(pc), d6	;564
	bra check_pc_side_tmss	;568 - check for `PRODUCED BY...` in option ROM region

check_option_rom_tmss_result:
	movem.l (a7)+, d1	;56C - restore saved cart type
	cmp.l sega_header(pc), d0	;570
	bne.b option_rom_tmss_fail	;574
	move.l a0, a1	;576
	move.l a0, d0	;578
	lsr.l #4, d0	;57A
	lsr.w #8, d0	;57C
	and.b #$DE, d0	;57E
	cmp.b ADR_AF1162.l, d0	;582 - make sure we didn't find it in the bus switch memory window region
	beq.b option_rom_tmss_fail	;588
	cmp.b #$D0, d0	;58A
	bge.b option_rom_tmss_fail	;58E
	add.w #$100, d1	;590 - found 'PRODUCED BY...' text in option ROM region
option_rom_tmss_fail:
	btst.b #0, ADR_AF1165.l	;594 - check PC/MD mode switch
	beq.b in_md_mode	;59C
	bset.b #6, ADR_AE0001.l	;59E - set bit 6 of AE0001 if we're in PC mode
in_md_mode:
	tst.b d1	;5A6
	beq.b no_cart_or_tera286	;5A8
	cmp.b #1, d1	;5AA
	beq.b no_cart_or_tera286	;5AE
	bra.b ADR_5BA	;5B0
no_cart_or_tera286:
	bset.b #5, ADR_AE0001.l	;5B2 - set bit 5 of AE0001 if we have no cart or a TERA286 cart
ADR_5BA:
	move.l d1, d7	;5BA
	tst.w d7	;5BC
	beq.b no_cart_and_no_option_rom	;5BE
	move.w #$4A14, d1	;5C0
	moveq.l #2, d0	;5C4
	move.w #$100, d2	;5C6
	lea.l tmss_string_for_display(pc), a0	;5CA
ADR_5CE:
	move.w d1, ADR_C00004.l	;5CE
	move.w #3, ADR_C00004.l	;5D4
ADR_5DC:
	move.b (a0)+, d2	;5DC
	beq.b ADR_5E8	;5DE
	move.w d2, ADR_C00000.l	;5E0
	bra.b ADR_5DC	;5E6
ADR_5E8:
	add.w #128, d1	;5E8
	dbf d0, ADR_5CE	;5EC
no_cart_and_no_option_rom:
	move.w #$8144, ADR_C00004.l	;5F0
	move.w #49, d0	;5F8
	btst.b #6, ADR_A10001.l	;5FC - check 50 Hz bit in version register
	bne.b ADR_60A	;604
	move.w #59, d0	;606
ADR_60A:
	btst.b #3, ADR_C00005.l	;60A
	bne.b ADR_60A	;612
ADR_614:
	btst.b #3, ADR_C00005.l	;614
	beq.b ADR_614	;61C
	dbf d0, ADR_60A	;61E
	cmp.b #2, d7	;622 - check for TERA68K cart
	beq.b handle_tera68k	;626
	cmp.w #$100, d7	;628
	bge.b handle_option_rom	;62C
	tst.b d7	;62E - skip MD mode check if no cart is inserted
	beq.b clear_vram	;630
	btst.b #0, ADR_AF1165.l	;632 - check PC boot, skip VRAM clear for MD mode
	beq.b clear_work_ram	;63A
clear_vram:
	move.l #$40000000, ADR_C00004.l	;63C
	move.w #$3FFF, d0	;646
	moveq.l #0, d1	;64A
ADR_64C:
	move.l d1, ADR_C00000.l	;64C
	dbf d0, ADR_64C	;652
clear_work_ram:
	lea.l ADR_FF0000.l, a0	;656
	move.w #$3FFF, d0	;65C
	moveq.l #0, d1	;660
ADR_662:
	move.l d1, (a0)+	;662
	dbf d0, ADR_662	;664
	bra.w set_tmss_reg_and_return_to_286	;668

handle_option_rom:
	move.l a1, d0	;66C
	and.w #$FC00, d0	;66E
	move.l d0, a1	;672
	move.l (4, a1), d0	;674
	jmp (0, a1, d0.l)	;678

handle_tera68k:
	lea.l md_hardware_init(pc), a0	;67C
	lea.l ADR_FF0000.l, a1	;680
	moveq.l #63, d0	;686
ADR_688:
	move.l (a0)+, (a1)+	;688
	dbf d0, ADR_688	;68A
	lea.l init_hw_and_boot_tera68k_cart(pc), a0	;68E
	lea.l ADR_FF0100.l, a1	;692
	move.w #127, d0	;698
ADR_69C:
	move.l (a0)+, (a1)+	;69C
	dbf d0, ADR_69C	;69E
	jmp ADR_FF0100.l	;6A2

cart_tmss_fail:
	lea.l ADR_A11200.l, a2	;6A8
	lea.l ADR_A11100.l, a3	;6AE
	move.b #0, (a2)	;6B4
	move.b #1, (a3)	;6B8
	moveq.l #31, d0	;6BC
ADR_6BE:
	dbf d0, ADR_6BE	;6BE
	move.b #1, (a2)	;6C2
	lea.l tmss_fail_z80_prog(pc), a0	;6C6
	lea.l ADR_A00000.l, a1	;6CA
	moveq.l #127, d0	;6D0
ADR_6D2:
	move.b (a0)+, (a1)+	;6D2
	dbf d0, ADR_6D2	;6D4
	move.b #0, (a2)	;6D8
	moveq.l #31, d0	;6DC
ADR_6DE:
	dbf d0, ADR_6DE	;6DE
	move.b #16, ADR_AE0001.l	;6E2 - set warm boot flag and clear others
	bset.b #6, ADR_AF1164.l	;6EA - ???
	move.b #2, (a3)	;6F2
	move.b #1, (a2)	;6F6
	move.l #$40000000, ADR_C00004.l	;6FA - configure VDP for VRAM writes
ADR_704:
	move.w ADR_C00000.l, d0	;704 - wedge CPU by doing a read instead
	bra.b ADR_704	;70A
tmss_fail_z80_prog:
	incbin "tmss_fail_z80_program.bin"

	dc.b $76 ; unclear what this is for, might just be some odd padding
	
ADR_722:
	lea.l ADR_728(pc), a6	;722
	bra.b ADR_78C	;726

ADR_728:
	lea.l ADR_B2E(pc), a0	;728
	move.l #$40200000, ADR_C00004.l	;72C
	bsr ADR_A02	;736
	move.w #1, d0	;73A
	move.w ADR_FC(pc), d1	;73E
	moveq.l #3, d2	;742
ADR_744:
	move.w d1, ADR_C00004.l	;744
	move.w #3, ADR_C00004.l	;74A
	add.w #128, d1	;752
	moveq.l #11, d3	;756
ADR_758:
	move.w d0, ADR_C00000.l	;758
	addq.w #1, d0	;75E
	dbf d3, ADR_758	;760
	dbf d2, ADR_744	;764
	move.w ADR_F8(pc), ADR_C00004.l	;768
	move.w #3, ADR_C00004.l	;770
	move.w #$100, d0	;778
	moveq.l #9, d1	;77C
ADR_77E:
	move.w d0, ADR_C00000.l	;77E
	addq.w #1, d0	;784
	dbf d1, ADR_77E	;786
	rts	;78A

ADR_78C:
	move.w ADR_C00004.l, d0	;78C
	lea.l vdp_reg_values(pc), a0	;792 - 300(pc)
	lea.l ADR_C00004.l, a1	;796
	lea.l ADR_C00000.l, a2	;79C
	moveq.l #18, d0	;7A2
	move.w #$8000, d1	;7A4
vdp_reg_loop:
	move.b (a0)+, d1	;7A8
	move.w d1, (a1)	;7AA
	add.w #$100, d1	;7AC
	dbf d0, vdp_reg_loop	;7B0
	move.l #$40000000, (a1)	;7B4
	move.w #$3FFF, d0	;7BA
	moveq.l #0, d1	;7BE
vram_clear_loop:
	move.l d1, (a2)	;7C0
	dbf d0, vram_clear_loop	;7C2
	move.l #$C0000000, (a1)	;7C6
	lea.l palette(pc), a0	;7CC
	moveq.l #15, d0	;7D0
pal_loop:
	move.w (a0)+, (a2)	;7D2
	dbf d0, pal_loop	;7D4
	move.l #$60000000, (a1)	;7D8
	lea.l ADR_E74(pc), a0	;7DE
	moveq.l #29, d0	;7E2
ADR_7E4:
	moveq.l #7, d1	;7E4
ADR_7E6:
	moveq.l #7, d2	;7E6
	move.b (a0)+, d3	;7E8
ADR_7EA:
	lsr.b #1, d3	;7EA
	roxr.l #1, d4	;7EC
	lsr.l #3, d4	;7EE
	dbf d2, ADR_7EA	;7F0
	move.l d4, (a2)	;7F4
	dbf d1, ADR_7E6	;7F6
	dbf d0, ADR_7E4	;7FA
	move.l #$40000010, (a1)	;7FE
	moveq.l #0, d1	;804
	moveq.l #19, d0	;806
vsram_clear_loop:
	move.l d1, (a2)	;808
	dbf d0, vsram_clear_loop	;80A
	jmp (a6)	;80E

pc_unlock_request:
	btst.b #5, ADR_AE0001.l	;810 - check if a non-TERA286 cart was detected during cold boot
	beq set_tmss_reg_and_return_to_286	;818
	bclr.b #7, ADR_AE0001.l	;81C - ensure PC RAM is not mapped at 0
	bclr.b #1, ADR_AF1164.l	;824 - map Teradrive M68K boot ROM at $0 (should already be the case)
	lea.l ADR_B00000.l, a0	;82C
	lea.l encrypted_tmss_string(pc), a1	;832
	moveq.l #0, d1	;836
	moveq.l #0, d2	;838
	move.w tmss_string_length(pc), d3	;83A - d3 = $00000038
	move.l sega_header(pc), d6	;83E
	;d0 == 0 -> d1 = $50000 - check all conventional memory
	;d0 == $9E || d0 == $FDE -> d1 = $1000 - we're near an address boundary, only check 8K region
	;d0 == $FE -> d1 = $1000, d2 = 1
	;else d1 = $2000 - check 16K region
	cmp.w #0, d0	;842
	bne.b ADR_850	;846
	move.l #$50000, d1	;848
	bra.b check_pc_side_tmss	;84E
ADR_850:
	cmp.w #$9E, d0	;850
	bne.b ADR_85E	;854
	move.l #$1000, d1	;856
	bra.b check_pc_side_tmss	;85C
ADR_85E:
	cmp.w #$FDE, d0	;85E
	bne.b ADR_86C	;862
	move.l #$1000, d1	;864
	bra.b check_pc_side_tmss	;86A
ADR_86C:
	cmp.b #$FE, d0	;86C
	bne.b ADR_87A	;870
	moveq.l #1, d2	;872
	move.w #$1000, d1	;874
	bra.b check_pc_side_tmss	;878
ADR_87A:
	move.w #$2000, d1	;87A

check_pc_side_tmss:
	move.w d0, d7	;87E - d0 contains PC physical address to search >> 12 (may come from $1166, but not in all call sites)
	lsr.w #8, d7	;880 - transform to 1 MiB bank
	;store top byte of word read from $AF1166 in $AE0003
	move.b d7, ADR_AE0003.l	;882 - select PC bank
	and.w #$FF, d0	;888 - d0 = $000000XX
	swap.w d0	;88C - d0 = $00XX0000
	lsr.l #4, d0	;88E - d0 = $000XX000
	add.l d0, a0	;890 - a0 = $00BXX000 - transform rest of segment into 
	moveq.l #0, d0	;892
	move.w (a1), d0	;894 - d0 = $00001713
	eor.w d6, d0	;896 - d0 = $00005052 'PR' i.e. first 2 chars of PRODUCED BY...
ADR_898:
	cmp.w (a0)+, d0	;898
	bne.b ADR_8DC	;89A
	move.l a1, a2	;89C - a2 = $C0?
	move.w d3, d4	;89E - d4 = $00000038
	addq.l #2, a2	;8A0 - a2 = $C2
	subq.w #2, d4	;8A2 - d4 = $00000036
	move.l d0, d6	;8A4 - d6 = $00005052
	bra.b ADR_8BC	;8A6
ADR_8A8:
	move.w (a2)+, d5	;8A8
	eor.w d6, d5	;8AA
	move.w d5, d6	;8AC
	ror.l #4, d6	;8AE
	swap.w d6	;8B0
	cmp.w (a0), d5	;8B2
	bne.b ADR_8DE	;8B4
	addq.l #2, a0	;8B6
	subq.w #2, d4	;8B8
	beq.b ADR_8FC	;8BA
ADR_8BC:
	subq.l #1, d1	;8BC
	bne.b ADR_8A8	;8BE
	tst.b d2	;8C0
	beq.b ADR_902	;8C2
	addq.w #1, d7	;8C4 - wrapped around, increment bank and reset pointer
	move.b d7, ADR_AE0003.l	;8C6
	lea.l ADR_B00000.l, a0	;8CC
	move.l #$1000, d1	;8D2
	moveq.l #0, d2	;8D8
	bra.b ADR_8A8	;8DA
ADR_8DC:
	subq.l #1, d1	;8DC
ADR_8DE:
	bne.b ADR_898	;8DE
	tst.b d2	;8E0
	beq.b ADR_902	;8E2
	addq.w #1, d7	;8E4
	move.b d7, ADR_AE0003.l	;8E6
	lea.l ADR_B00000.l, a0	;8EC
	move.l #$1000, d1	;8F2
	moveq.l #0, d2	;8F8
	bra.b ADR_898	;8FA
ADR_8FC:
	move.l sega_header(pc), d0	;8FC
	jmp (a6)	;900 - a6 = return address
ADR_902:
	moveq.l #0, d0	;902
	jmp (a6)	;904

check_pc_unlock_result:
	move.w ADR_AF1166.l, d7	;906
	move.w #$F80F, ADR_AF1166.l	;90C
	swap.w d7	;914
	move.b ADR_AF1164.l, d7	;916
	bset.b #2, ADR_AF1164.l	;91C - switch to MD video
	move.l d0, ADR_A14000.l	;924
	;check for whether or not TMSS check passed
	cmp.l sega_header(pc), d0	;92A
	bne ADR_9E8	;92E
	lea.l ADR_93A(pc), a6	;932
	bra ADR_78C	;936

ADR_93A:
	move.w #$4614, d1	;93A
	moveq.l #2, d0	;93E
	move.w #$100, d2	;940
	lea.l tmss_string_for_display(pc), a0	;944
ADR_948:
	move.w d1, ADR_C00004.l	;948
	move.w #3, ADR_C00004.l	;94E
ADR_956:
	move.b (a0)+, d2	;956
	beq.b ADR_962	;958
	move.w d2, ADR_C00000.l	;95A
	bra.b ADR_956	;960
ADR_962:
	add.w #$100, d1	;962
	dbf d0, ADR_948	;966
	move.w #$8238, ADR_C00004.l	;96A
	move.w #$8144, ADR_C00004.l	;972
	move.w #24, d0	;97A
	btst.b #6, ADR_A10001.l	;97E
	bne.b ADR_98C	;986
	move.w #29, d0	;988
ADR_98C:
	btst.b #3, ADR_C00005.l	;98C
	bne.b ADR_98C	;994
ADR_996:
	btst.b #3, ADR_C00005.l	;996
	beq.b ADR_996	;99E
	dbf d0, ADR_98C	;9A0
	move.w #$8230, ADR_C00004.l	;9A4
	move.w #24, d0	;9AC
	btst.b #6, ADR_A10001.l	;9B0
	bne.b ADR_9BE	;9B8
	move.w #29, d0	;9BA
ADR_9BE:
	btst.b #3, ADR_C00005.l	;9BE
	bne.b ADR_9BE	;9C6
ADR_9C8:
	btst.b #3, ADR_C00005.l	;9C8
	beq.b ADR_9C8	;9D0
	dbf d0, ADR_9BE	;9D2
	move.l #$40000000, (a1)	;9D6
	move.w #$3FFF, d0	;9DC
	moveq.l #0, d1	;9E0
ADR_9E2:
	move.l d1, (a2)	;9E2
	dbf d0, ADR_9E2	;9E4
ADR_9E8:
	move.b d7, ADR_AF1164.l	;9E8
	swap.w d7	;9EE
	move.w d7, ADR_AF1166.l	;9F0
	move.w #$8104, ADR_C00004.l	;9F6
	bra.w return_to_286	;9FE

ADR_A02:
	lea.l ADR_AB0(pc), a3	;A02
	lea.l ADR_C00000.l, a4	;A06
	lea.l ADR_FF2000.l, a1	;A0C
	move.w (a0)+, d2	;A12
	lsl.w #1, d2	;A14
	bcc.b ADR_A1C	;A16
	add.w #10, a3	;A18 a3 is now ABA
ADR_A1C:
	lsl.w #2, d2	;A1C
	move.w d2, a5	;A1E
	moveq.l #8, d3	;A20
	moveq.l #0, d2	;A22
	moveq.l #0, d4	;A24
	bsr ADR_ADC	;A26
	move.b (a0)+, d5	;A2A
	asl.w #8, d5	;A2C
	move.b (a0)+, d5	;A2E
	move.w #16, d6	;A30
	bsr.s ADR_A38	;A34
	rts	;A36

ADR_A38:
	move.w d6, d7	;A38
	subq.w #8, d7	;A3A
	move.w d5, d1	;A3C
	lsr.w d7, d1	;A3E
	cmp.b #$FC, d1	;A40
	bcc.b ADR_A84	;A44
	and.w #$FF, d1	;A46
	add.w d1, d1	;A4A
	move.b (0, a1, d1.w), d0	;A4C
	ext.w d0	;A50
	sub.w d0, d6	;A52
	cmp.w #9, d6	;A54
	bcc.b ADR_A60	;A58
	addq.w #8, d6	;A5A
	asl.w #8, d5	;A5C
	move.b (a0)+, d5	;A5E
ADR_A60:
	move.b (1, a1, d1.w), d1	;A60
	move.w d1, d0	;A64
	and.w #15, d1	;A66
	and.w #$F0, d0	;A6A
ADR_A6E:
	lsr.w #4, d0	;A6E
ADR_A70:
	lsl.l #4, d4	;A70
	or.b d1, d4	;A72
	subq.w #1, d3	;A74
	bne.b ADR_A7E	;A76
	jmp (a3)	;A78

ADR_A7A:
	moveq.l #0, d4	;A7A
	moveq.l #8, d3	;A7C
ADR_A7E:
	dbf d0, ADR_A70	;A7E
	bra.b ADR_A38	;A82
ADR_A84:
	subq.w #6, d6	;A84
	cmp.w #9, d6	;A86
	bcc.b ADR_A92	;A8A
	addq.w #8, d6	;A8C
	asl.w #8, d5	;A8E
	move.b (a0)+, d5	;A90
ADR_A92:
	subq.w #7, d6	;A92
	move.w d5, d1	;A94
	lsr.w d6, d1	;A96
	move.w d1, d0	;A98
	and.w #15, d1	;A9A
	and.w #112, d0	;A9E
	cmp.w #9, d6	;AA2
	bcc.b ADR_A6E	;AA6
	addq.w #8, d6	;AA8
	asl.w #8, d5	;AAA
	move.b (a0)+, d5	;AAC
	bra.b ADR_A6E	;AAE

ADR_AB0:
	move.l d4, (a4)	;AB0
	subq.w #1, a5	;AB2
	move.w a5, d4	;AB4
	bne.b ADR_A7A	;AB6
	rts	;AB8

ADR_ABA:
	eor.l d4, d2	;ABA
	move.l d2, (a4)	;ABC
	subq.w #1, a5	;ABE
	move.w a5, d4	;AC0
	bne.b ADR_A7A	;AC2
	rts	;AC4

ADR_AC6:
	move.l d4, (a4)+	;AC6
	subq.w #1, a5	;AC8
	move.w a5, d4	;ACA
	bne.b ADR_A7A	;ACC
	rts	;ACE

ADR_AD0:
	eor.l d4, d2	;AD0
	move.l d2, (a4)+	;AD2
	subq.w #1, a5	;AD4
	move.w a5, d4	;AD6
	bne.b ADR_A7A	;AD8
	rts	;ADA

ADR_ADC:
	move.b (a0)+, d0	;ADC
ADR_ADE:
	cmp.b #$FF, d0	;ADE
	bne.b ADR_AE6	;AE2
	rts	;AE4
ADR_AE6:
	move.w d0, d7	;AE6
ADR_AE8:
	move.b (a0)+, d0	;AE8
	cmp.b #128, d0	;AEA
	bcc.b ADR_ADE	;AEE
	move.b d0, d1	;AF0
	and.w #15, d7	;AF2
	and.w #112, d1	;AF6
	or.w d1, d7	;AFA
	and.w #15, d0	;AFC
	move.b d0, d1	;B00
	lsl.w #8, d1	;B02
	or.w d1, d7	;B04
	moveq.l #8, d1	;B06
	sub.w d0, d1	;B08
	bne.b ADR_B16	;B0A
	move.b (a0)+, d0	;B0C
	add.w d0, d0	;B0E
	move.w d7, (0, a1, d0.w)	;B10
	bra.b ADR_AE8	;B14
ADR_B16:
	move.b (a0)+, d0	;B16
	lsl.w d1, d0	;B18
	add.w d0, d0	;B1A
	moveq.l #1, d5	;B1C
	lsl.w d1, d5	;B1E
	subq.w #1, d5	;B20
ADR_B22:
	move.w d7, (0, a1, d0.w)	;B22
	addq.w #2, d0	;B26
	dbf d5, ADR_B22	;B28
	bra.b ADR_AE8	;B2C
ADR_B2E:
	incbin "binary_data_b2e.bin"
ADR_E74:
	incbin "binary_data_e74.bin"
tmss_string_for_display:
	;"   PRODUCED BY OR"
	dc.b $0A, $0A, $0A, $0B, $0C, $0D, $0E, $0F, $10, $11, $0E, $0A, $12, $13, $0A, $0D
	dc.b $0C, $00
	;" UNDER LICENSE FROM"
	dc.b $0A, $0F, $14, $0E, $11, $0C, $0A, $15, $16, $10, $11, $14, $17, $11, $0A, $18
	dc.b $0C, $0D, $19, $00
	;"SEGA ENTERPRISES Ltd."
	dc.b $17, $11, $1A, $1B, $0A, $11, $14, $1C, $11, $0C, $0B, $0C, $16, $17, $11, $17, $0A, $15, $1C, $0E, $1D, $00
	
	align 6
pad:
	rept ($FFE-$FC0)/2
	dc.w $00
	endr
	dc.w $3412
